#! /usr/bin/env python

dev = False

from Tkinter import *
import sys, threading, Queue

if not dev:
    import imp
    imp.load_source('pacgraph', '/usr/bin/pacgraph')
import pacgraph

colors = {'sel' : '#000',
          'uns' : '#888',
          'dep' : '#008',
          'req' : '#00F',
          'bg'  : '#FFF',
          'line': '#DDD'}

class Motion(object):
    def __init__(self):
        self.mouse = None  # prev canvas coord
        self.scale = 1.0
        self.typed = ''
    def button_up(self, event):
        self.mouse = None
    def drag(self, event):
        if self.mouse is None:
            self.mouse = (event.x, event.y)
            return
        mdx = event.x - self.mouse[0]
        mdy = event.y - self.mouse[1]
        canvas.move(ALL, mdx, mdy)
        self.mouse = (event.x, event.y)
    def zoom(self, event, factor):
        self.scale *= factor
        new_p = lambda p: str(max(1, int(p * 0.5 * self.scale)))
        cx,cy = origin()
        canvas.scale(ALL, cx, cy, factor, factor)
        for n,v in tree.iteritems():
            canvas.itemconfig(v.tk, font=('Monospace', new_p(v.font_pt)))
    def zoom_in(self, event):
        if self.scale*1.1 > 2:
            return
        self.zoom(event, 1.1)
    def zoom_out(self, event):
        if self.scale*0.8 < 0.1:
            return
        self.zoom(event, 0.8)
    def search(self, event):
        # prototype, eventually zoom-to-fit typed matches
        #print event.char, event.keysym, event.keycode
        ks = event.keysym
        c = event.char
        matches = []
        if ks in ['space', 'BackBpace', 'Escape', 'Delete', 'Return']:
            self.typed = ''
        if c.isalpha():
            self.typed += c
            matches = [n for n in tree if self.typed in n]
        for name in tree:
            if name in matches:
                color_text(name, 'sel')
            else:
                color_text(name, 'uns')

class Container(object):
    pass

def origin():
    "center of the canvas"
    return canvas.winfo_width()//2, canvas.winfo_height()//2

def color_text(name, color):
    canvas.itemconfig(tree[name].tk, fill=colors[color])

def hilite(event, name, selected):
    if selected:
        color_text(name, 'sel')
        for l in tree[name].links:
            color_text(l, 'dep')
        for l in tree[name].inverse:
            color_text(l, 'req')
    else:
        color_text(name, 'uns')
        for l in tree[name].all:
            color_text(l, 'uns')

def main():
    global canvas, tree
    arch = pacgraph.Arch()
    if len(sys.argv) == 1:
        print 'Loading local repo.'
        tree = arch.local_load()
    else:
        print 'Loading repository.'
        tree = arch.repo_load()
    print 'Preparing %i nodes.' % len(tree)
    tree = pacgraph.pt_sizes(tree, 10, 100)
    tree = pacgraph.place(tree)
    print 'Hover, drag, scroll and type to control.'
    
    root = Tk()
    canvas = Canvas(root, bg=colors['bg'])
    canvas.pack(expand=1, fill=BOTH)
    canvas.tk_focusFollowsMouse()
    
    lines = pacgraph.all_links(tree)
    lines_tk = []
    for line in lines:
        p = line[0] + line[1]
        c = colors['line']
        l = Container()
        l.p1 = line[0]
        l.p2 = line[1]
        l.tk = canvas.create_line(p, fill=c)
        lines_tk.append(l)
    
    for name,info in tree.items():
        p = info.font_pt
        tree[name].tk = canvas.create_text(
                info.center[0], info.center[1]+p//4, 
                text=name, anchor=S, fill=colors['uns'], 
                font=('Monospace', str(p//2)))
        n = name
        canvas.tag_bind(tree[n].tk, '<Enter>', lambda e, n=n: hilite(e, n, True))
        canvas.tag_bind(tree[n].tk, '<Leave>', lambda e, n=n: hilite(e, n, False))
    
    motion = Motion()
    canvas.bind('<B1-Motion>', motion.drag)
    canvas.bind('<ButtonRelease-1>', motion.button_up)
    canvas.bind('<B2-Motion>', motion.drag)
    canvas.bind('<ButtonRelease-2>', motion.button_up)
    canvas.bind('<B3-Motion>', motion.drag)
    canvas.bind('<ButtonRelease-3>', motion.button_up)
    canvas.bind('<Button-4>', motion.zoom_in)
    canvas.bind('<Button-5>', motion.zoom_out)
    canvas.bind('<Key>', motion.search)
    
    root.mainloop()

main()
