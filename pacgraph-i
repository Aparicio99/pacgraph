#! /usr/bin/env python

dev = False

from Tkinter import *

if not dev:
    import imp
    imp.load_source('pacgraph', '/usr/bin/pacgraph')
import pacgraph

color = {'sel' : '#000',
         'uns' : '#888',
         'dep' : '#008',
         'req' : '#00F',
         'bg'  : '#FFF',
         'line': '#DDD'}

class Motion(object):
    def __init__(self):
        self.mouse = None  # prev canvas coord
        self.scale = 1.0
    def button_up(self, event):
        self.mouse = None
    def drag(self, event):
        if self.mouse is None:
            self.mouse = (event.x, event.y)
            return
        mdx = event.x - self.mouse[0]
        mdy = event.y - self.mouse[1]
        canvas.move(ALL, mdx, mdy)
        self.mouse = (event.x, event.y)
    def zoom(self, event, factor):
        self.scale *= factor
        new_p = lambda p: str(max(1, int(p * 0.5 * self.scale)))
        cx,cy = origin()
        canvas.scale(ALL, cx, cy, factor, factor)
        for n,v in tree.iteritems():
            canvas.itemconfig(v.tk, font=('Monospace', new_p(v.font_pt)))
    def zoom_in(self, event):
        if self.scale*1.1 > 2:
            return
        self.zoom(event, 1.1)
    def zoom_out(self, event):
        if self.scale*0.8 < 0.1:
            return
        self.zoom(event, 0.8)

class Container(object):
    pass

def origin():
    "center of the canvas"
    return canvas.winfo_width()//2, canvas.winfo_height()//2

def hilite(event, name, selected):
    c_text = lambda n, c: canvas.itemconfig(tree[n].tk, fill=color[c])
    if selected:
        c_text(name, 'sel')
        for l in tree[name].links:
            c_text(l, 'dep')
        for l in tree[name].inverse:
            c_text(l, 'req')
    else:
        c_text(name, 'uns')
        for l in tree[name].all:
            c_text(l, 'uns')

arch = pacgraph.Arch()
print 'Loading local repo.'
tree = arch.local_load(pacgraph.MockOptions())
print 'Preparing %i nodes.' % len(tree)
tree = pacgraph.pt_sizes(tree, 10, 100)
tree = pacgraph.place(tree)
print 'Hover, drag, and scroll to control.'

root = Tk()
canvas = Canvas(root, bg=color['bg'])
canvas.pack(expand=1, fill=BOTH)

lines = pacgraph.all_links(tree)
lines_tk = []
for line in lines:
    p = line[0] + line[1]
    c = color['line']
    l = Container()
    l.p1 = line[0]
    l.p2 = line[1]
    l.tk = canvas.create_line(p, fill=c)
    lines_tk.append(l)

for name,info in tree.items():
    p = info.font_pt
    tree[name].tk = canvas.create_text(
            info.center[0], info.center[1]+p//4, 
            text=name, anchor=S, fill=color['uns'], 
            font=('Monospace', str(p//2)))
    n = name
    canvas.tag_bind(tree[n].tk, '<Enter>', lambda e, n=n: hilite(e, n, True))
    canvas.tag_bind(tree[n].tk, '<Leave>', lambda e, n=n: hilite(e, n, False))

motion = Motion()
canvas.bind('<B1-Motion>', motion.drag)
canvas.bind('<ButtonRelease-1>', motion.button_up)
canvas.bind('<B2-Motion>', motion.drag)
canvas.bind('<ButtonRelease-2>', motion.button_up)
canvas.bind('<B3-Motion>', motion.drag)
canvas.bind('<ButtonRelease-3>', motion.button_up)
canvas.bind('<Button-4>', motion.zoom_in)
canvas.bind('<Button-5>', motion.zoom_out)

root.mainloop()

