#! /usr/bin/env python

import random, math, subprocess, os, cProfile, optparse
from itertools import *
from collections import deque, defaultdict

# depends contains %CONFLICTS%, 
# %DEPENDS%, %OPTDEPENDS%, %PROVIDES%

# desc contains %URL%, %REPLACES%, %LICENSE%,
# %NAME%, %GROUPS%, %BUILDDATE%, %REASON%, %DESC%,
# %SIZE%, %PACKAGER%, %ARCH%, %INSTALLDATE%, %VERSION%

pj = os.path.join

class Node(object):
    def __init__(self, **kwargs):
        self.name     = ''      # matches dict key
        self.links    = set([]) # of name strings
        self.inverse  = set([]) # of name strings
        self.size     = 0       # bytes, usually
        self.font_pt  = 0       # scaled from size
        self.explicit = False   # True if explicitly installed package
        self.center   = (0,0)   # (x,y)
        self.color    = '#000000'
        self.__dict__.update(kwargs)
    def __repr__(self):
        return repr({'links' : self.links, 
                     'size'  : self.size})
    # cache the slowest of these?
    @property
    def all(self):
        return self.links | self.inverse
    @property
    def dim(self):
        return pt2dim(self.name, self.font_pt)
    @property
    def box(self):
        return bbox(self.center, self.dim)
    @property
    def cd(self):
        return [self.center, self.dim]

class MockOptions(object):
    def __init__(self):
        self.opt_deps = False

def unrip(path):
    "path -> dict of Nodes"
    text = ''.join(open(path))
    tree = eval(text)
    return bilink_tree(dict((p,Node(**n)) for p,n in tree.items()))

def l_part(n, c):
    return n.partition(c)[0]

def reduce_by(fn, data, arg_list):
    data = fn(data, arg_list.pop(0))
    if not arg_list:
        return data
    return reduce_by(fn, data, arg_list)

class Arch(object):
    def clean(self, n):
        return reduce_by(l_part, n.strip(), list('><:='))
    
    def load_info(self, arch_file):
        info = defaultdict(list)
        mode = None
        for line in (self.clean(l) for l in arch_file):
            if not line:
                continue
            if line.startswith('%'):
                mode = line
                continue
            info[mode].append(line)
        arch_file.close()
        return info
    
    def strip_info(self, info):
        keep = ['DEPENDS', 'OPTDEPENDS', 'PROVIDES', 'SIZE', 'ISIZE', 'REASON']
        info = dict((k.strip('%'),v) for k,v in info.items())
        name = info['NAME'][0]
        info = dict((k,v) for k,v in info.items() if k in keep)
        if 'ISIZE' in info:
            info['SIZE'] = info['ISIZE']
        if 'SIZE' in info:
            info['SIZE'] = int(info['SIZE'][0], 10)
        else:
            info['SIZE'] = 0
        if 'REASON' in info:
            info['REASON'] = info['REASON'] == '1'
        else:
            info['REASON'] = False
        return name, info
    
    def load_tree(self, dirs):
        packages = [p for r in dirs for p,d,f in os.walk(r) if f]
        tree = {}
        for p in set(packages) - set(dirs):
            try:
                info = {}
                arch_file = open(pj(p,'depends'), 'r')
                info.update(self.load_info(arch_file))
                arch_file = open(pj(p,'desc'), 'r')
                info.update(self.load_info(arch_file))
                name, info = self.strip_info(info)
                tree[name] = info
            except:
                print 'Error reading package', p
        return tree
    
    def actually_installed_fn(self, tree):
        "use only on load_tree data, returns function"
        p_set = set(tree)
        errors = {}
        p_tree = dict((p,tree[p]['PROVIDES']) for p in tree if 'PROVIDES' in tree[p])
        def actually(packages):
            installed = set(packages) & p_set
            maybe = set(packages) - installed
            for pack in maybe:
                if pack in errors:
                    installed.add(errors[pack])
                    continue
                provides = sorted(p for p in p_tree if pack in p_tree[p])
                if len(provides) > 1:
                    print 'warning: %s found in %s, assuming %s' % (pack, provides, provides[0])
                    errors[pack] = provides[0]
                if len(provides) >= 1:
                    installed.add(provides[0])
                # len 0 means not installed optdep
            return list(installed)
        return actually
    
    def merge_tree(self, tree):
        "merge provides, depends, optdepends"
        options, args = parse()
        tree2 = {}
        actually_installed = self.actually_installed_fn(tree)
        # merge
        for p,info in tree.iteritems():
            tp = defaultdict(list, info)
            deps = tp['DEPENDS']
            if options.opt_deps:
                deps += tp['OPTDEPENDS']
            # remove unused optdeps
            deps = actually_installed(deps)
            tree2[p] = Node(name=p, size=info['SIZE'], links=set(deps), explicit=info['REASON'])
        return tree2
    
    def local_load(self):
        dirs = ['/var/lib/pacman/local/']
        tree = compress_chains(bilink_tree(self.merge_tree(self.load_tree(dirs))))
        return legal_links(tree)
    
    def repo_load(self):
        options, args = parse()
        packages = args
        dirs = ['/var/lib/pacman/sync/community/',
                '/var/lib/pacman/sync/core/',
                '/var/lib/pacman/sync/extra/']
        tree = self.merge_tree(self.load_tree(dirs))
        if not packages:
            return legal_links(compress_chains(bilink_tree(tree)))
        deps = [d for p in packages for d in full_deps(p, tree)]
        tree2 = dict((k,v) for k,v in tree.iteritems() if k in deps)
        return legal_links(bilink_tree(tree2))

class Debian(object):
    "Expect lots of 'error: unknown' messages. May be due to pseudo-dependencies being filled by 'Provides:' entries."
    
    def load_tree(self, status_path = None):
        "New implementation not extensively tested, your mileage may vary"
        tree = {}
        installed = False
        deps = set([])
        name = ''
        size = 0
        if status_path is None:
            status_path = '/var/lib/dpkg/status'
        file = open(status_path, 'r')
        for line in file:
            if line.startswith('Package:'):
                name = line.split(':')[1].strip()
            elif line.startswith('Status'):
                installed = ('install ok installed' in line) or ('install user installed' in line)
            elif line.startswith('Installed-Size:') or line.startswith('Size:'):
                size = int(line.split(':')[1].strip(), 10) * 1024
            elif line.startswith('Depends:'):
                deps = line.partition(':')[2]
                deps = [d for e in deps.split(',') for d in e.split('|')]
                deps = [d.partition('(')[0].strip() for d in deps]
                deps = set(deps) - set('')
            elif line == '\n' and installed and name and size:
                tree[name] = Node(name = name, links = deps, size = size)
                installed = False
                deps = set([])
                name = ''
                size = 0
        file.close()
        return tree
    
    def local_load(self, status_path=None):
        tree = legal_links(self.load_tree(status_path))
        tree = compress_chains(bilink_tree(tree))
        return legal_links(tree)
    
    def repo_load(self):
        print 'not implemented'
        raise

class Redhat(object):
    "RPM uses a capability/provider model. load_tree() has room for improvement"
    
    def load_tree(self):
        stdout = call_stdout('rpm --query --all --queryformat "%{NAME}<(^_^)>%{SIZE}<(^_^)>[%{REQUIRENAME}, ]<(^_^)>[%{PROVIDENAME}, ]\n"')
        tree = {}
        requirer_lookup = {}
        provider_lookup = {}
        for line in stdout:
            if line == '':
                break
            name,nullo,line = line.partition('<(^_^)>')
            size,nullo,line = line.partition('<(^_^)>')
            size = int(size, 10)
            requires,nullo,provides = line.partition('<(^_^)>')
            requires = set([capability.strip() for capability in requires.split(',')]) - set([''])
            for capability in requires:
                if capability not in requirer_lookup:
                    requirer_lookup[capability] = set([])
                requirer_lookup[capability] |= set([name])
            provides = set([capability.strip() for capability in provides.split(',')]) - set([''])
            for capability in provides:
                if capability not in provider_lookup:
                    provider_lookup[capability] = set([])
                provider_lookup[capability] |= set([name])
            if name in tree:
                tree[name].size += size
            else:
                tree[name] = Node(name = name, links = set([]), size = size)
        for capability in set(requirer_lookup) & set(provider_lookup):
            for package in requirer_lookup[capability]:
                tree[package].links |= provider_lookup[capability]
        return tree
    
    def local_load(self):
        tree = legal_links(self.load_tree())
        tree = compress_chains(bilink_tree(tree))
        return legal_links(tree)
    
    def repo_load(self):
        print 'not implemented'
        raise

class Crux(object):
    "based entirely on docs, needs to be tested"
    def find_all(self, package):
        raw = call_stdout('pkginfo -i')
        for line in raw.split('\n'):
            yield line.split(' ')[0]
    def find_size(self, package):
        return call_stdout('pkgsize %s' % package)
    def find_deps(self, package):
        return call_stdout('finddeps %s' % package)
    def local_load(self):
        tree = {}
        all_packages = []
        for name in all_packages:
            size = self.find_size(name)
            deps = self.find_deps(name)
            tree[node] = Node(name=name, size=size, links=set(deps))
        return tree

class Textfile(object):
    """ VERY ALPHA, frequent to change!
    loads a space delineated text file
    file should be named "data", each line looks like
    node_name size link1 link2 link3 ..."""
    def load_tree(self):
        tree = {}
        filename = 'data'
        for line in open(filename).readlines():
            words = line.split()
            node = words[0]
            size = float(words[1])
            links = words[2:]
            tree[node] = Node(name=node, size=size, links=set(links))
        return tree

    def local_load(self):
        tree = legal_links(self.load_tree())
        tree = compress_chains(bilink_tree(tree))
        return legal_links(tree)


def full_deps(package, tree, reverse=False):
    "returns every package in dep tree"
    deps = set()
    to_crawl = deque([package])
    while to_crawl:
        current = to_crawl.popleft()
        if current in deps:
            continue
        deps.add(current)
        if not reverse:
            current_deps = tree[current].links
        else:
            current_deps = tree[current].inverse
        to_crawl.extend(current_deps - deps)
    return list(deps)

def bilink_tree(tree):
    "adds inverse from links"
    for p in tree:
        deps = tree[p].links
        [tree[d].inverse.add(p) for d in deps]
    return tree

def flatten(list_of_lists):
    return list(chain(*list_of_lists))

def single_depends(tree, preserve_explicit=False):
    if preserve_explicit:
        return (p for p in tree if len(tree[p].inverse) == 1 and not tree[p].explicit)
    else:
        return (p for p in tree if len(tree[p].inverse) == 1)

def compress_chains(tree):
    "single depends are absorbed into parent"
    options, args = parse()
    if not options.use_compression:
        return tree
    while True:
        singles = single_depends(tree, options.preserve_explicit)
        try:
            s = singles.next()
        except StopIteration:
            return tree
        parent = list(tree[s].inverse)[0]
        if s == parent:
            #print 'self loop', s
            tree[s].links.remove(s)
            tree[s].inverse.remove(s)
            continue
        #print 'merge', s, 'into', parent
        tree[parent].size += tree[s].size
        #tree[parent].name += ' ' + tree[s].name
        for dep in tree[s].links:
            tree[dep].inverse.remove(s)
            tree[dep].inverse.add(parent)
        tree[parent].links.update(tree[s].links)
        tree[parent].links.remove(s)
        tree.pop(s)

def sum_sizes(packages, tree):
    return sum(tree[p].size for p in packages if p in tree)

def shared_size(package, tree):
    "package and all deps"
    return sum_sizes(full_deps(package, tree), tree)

def biggest_packs(tree):
    packs = [(shared_size(p, tree), p) for p in tree]
    return [p for s,p in reversed(sorted(packs))]

def toplevel_packs(tree):
    return set(p for p in tree if not tree[p].inverse)

def packs_by_size(tree, pack_list):
    by_sizes = [(tree[n].size, n) for n in pack_list]
    return reversed(sorted(by_sizes))

def legal_links(tree):
    "removes/reports dangling references"
    valid = set(tree)
    for k,v in tree.iteritems():
        invalid1 = v.links - valid
        invalid2 = v.inverse - valid
        if invalid1:
            print 'error: unknown', list(invalid1), 'in', k 
            v.links = v.links - invalid1
        if invalid2:
           print 'error: unknown', list(invalid2), 'in', k
           v.inverse = v.inverse - invalid2
    return tree

#print 'worst shared packages:', biggest_packs(tree)[:20]
#print 'most crucial packages:', biggest_packs(invert_tree(tree))[:20]

def pt_sizes(tree, min_pt=10, max_pt=100):
    "size in bytes -> size in points"
    sizes = [node.size for p,node in tree.iteritems()]
    min_s,max_s = min(sizes), max(sizes)
    convert = lambda s: int((max_pt-min_pt)*(s-min_s)/(max_s-min_s) + min_pt)
    for p, node in tree.iteritems():
        tree[p].font_pt = convert(node.size)
    return tree

def prioritized(packs):
    "returns list of names, sorted by priority"
    # first are the most central, with lots of links
    stats = [(len(node.all), k) for k,node in packs.items()]
    stats = [n for l,n in reversed(sorted(stats))]
    # but slip in anyone who's deps are met early
    stats2 = []
    for n in (n for n in stats if n not in stats2):
        stats2.append(n)
        plotted = set(stats2)
        deps_met = [k for k,node in packs.items() if node.all <= plotted]
        stats2.extend(set(deps_met) - plotted)
    return stats2

def ran_rad():
    return random.random()*2*math.pi

def bbox(center, dim):
    c,d = center,dim
    x1,x2 = c[0]-d[0]//2, c[0]+d[0]//2
    y1,y2 = c[1]-d[1]   , c[1]+d[1]//3
    return [x1, y1, x2, y2] 

def common_ranges(r1, r2):
    "returns true if overlap"
    if r1 < r2:
        return r1[1] > r2[0]
    return r2[1] > r1[0]

def in_box(bbox1, bbox2):
    cr = common_ranges
    r1x = bbox1[0::2]
    r1y = bbox1[1::2]
    r2x = bbox2[0::2]
    r2y = bbox2[1::2]
    return cr(r1x, r2x) and cr(r1y, r2y)

def all_bboxes(name, packs, pri=None):
    if pri is None:
        name_list = packs.keys()
    else:
        name_list = pri[:pri.index(name)]
    return [packs[n].box for n in name_list]

def normalize(point, origin):
    p2 = point[0]-origin[0], point[1]-origin[1]
    length = (p2[0]**2 + p2[1]**2)**0.5
    return p2[0]/(length**2), p2[1]/(length**2)

def link_pull(name, origin_n, packs):
    "average of angles of links"
    origin = packs[origin_n].center
    norm_ps = lambda ps: [normalize(c, origin) for c in ps if c not in [(0,0), origin]]
    rot90 = lambda x,y: (-y,x) if random.randint(0,1) else (y,-x)
    good_links = packs[name].all
    skew_links = set(packs.keys()) - good_links
    g_centers  = norm_ps(packs[l].center for l in good_links)
    s_centers  = norm_ps(packs[l].center for l in skew_links)
    s_centers  = [rot90(*xy) for xy in s_centers]
    centers = g_centers + s_centers
    if not centers:  
        # new branch, try to avoid existing branches
        centers = norm_ps(packs[l].center for l in packs.keys())
        if not centers:
            return (0,0)
        centers = [(-x,-y) for x,y in centers]
    return map(sum, zip(*centers))

def xy2rad(x,y):
    "adds some wiggle so things are less spindly"
    # no longer needed?
    if (x,y) == (0,0):
        return ran_rad()
    #wiggle = 0  # radians
    #wiggle = random.random()*wiggle - wiggle/2.0
    return math.atan2(y,x) #+ wiggle

def pol2xy(o,a,r):
    return int(o[0]+r*math.cos(a)), int(o[1]+r*math.sin(a))

def pt2dim(name, pt):
    x_scale = 0.65
    y_scale = 0.85
    return int(len(name)*pt*x_scale), int(pt*y_scale)

def best_origin(name, pri, packs):
    "returns largest sibling, or root"
    possible = pri[:pri.index(name)]
    possible = [n for n in possible if n in packs[name].all]
    if not possible:
        return pri[0]  # root package
    return sorted((packs[n].size, n) for n in possible)[-1][1]

def search(cd, origin, heading, scale, b_list):
    "binary search recursive closure thingy, returns radius"
    history = []
    def probe(r):
        "returns true if clear"
        cd[0] = pol2xy(origin, heading, r)
        history.append(cd[0])
        bb1 = bbox(*cd)
        return not any(in_box(bb1, bb2) for bb2 in b_list)
    def search2(step, r):
        if probe(r-step//2):
            if step < 8*scale:
                return r-step//2
            return search2(step//2, r-step//2)
        if probe(r+step//2):
            return search2(step//2, r+step//2)
        return search2(step*2, r+step*2)
    return search2(scale*5, scale*5), history

def place(packs, detail=False):
    "radial placement algo, returns non-overlapping coords"
    # maybe try two different link_pulls for each placement?
    # maybe some control inversion to avoid queue checks?
    pri = prioritized(packs)
    if detail:
        yield pri[0], [(0,0)]
    else:
        yield pri[0], (0,0)
    for name in pri[1:]:
        node = packs[name]
        origin_name = best_origin(name, pri, packs)
        #print 'placing', name, 'around', origin_name
        origin = packs[origin_name].center
        heading = xy2rad(*link_pull(name, origin_name, packs))
        # unplaced links will need more room
        scale = len(node.all-set(pri[:pri.index(name)]))+1
        b_list = all_bboxes(name, packs, pri)
        r,history = search(node.cd, origin, heading, scale, b_list)
        center = pol2xy(origin, heading, r)
        if detail:
            yield name, history
        else:
            yield name, center

def offset_coord(c,d):
    "corrects textbox origin"
    return c[0]-d[0]//2, c[1]  #+d[1]//2

def xml_wrap(tag, inner, **kwargs):
    kw = ' '.join('%s="%s"' % (k, str(v)) for k,v in kwargs.items())
    if inner is None:
        return '<%s %s/>' % (tag, kw)
    return '<%s %s>%s</%s>' % (tag, kw, inner, tag)

def control_point(p1, p2, drop=None):
    dx = abs(p2[0] - p1[0])
    lower  = (p1,p2)[p1[1]<p2[1]]
    higher = (p2,p1)[p1[1]<p2[1]]
    if drop is None:
        drop = 0.5 + 0.5*random.random()
    return (lower[0]+higher[0])//2, lower[1]+dx*drop//2

def quad_spline(p1, p2):
    "boofor DSL in XML"
    c = control_point(p1, p2)
    return 'M%i,%i Q%i,%i %i,%i' % (p1+c+p2)

def svg_text(node):
    p = offset_coord(*node.cd)
    kw = {'x':p[0], 'y':p[1], 'font-size':node.font_pt, 'fill':node.color}
    return xml_wrap('text', node.name, **kw) 

def svg_spline(point1, point2):
    return xml_wrap('path', None, d=quad_spline(point1, point2))

def all_points(packs):
    "slightly incomplete, guestimates the splines"
    all_bb = flatten((bb[:2],bb[2:]) for bb in all_bboxes(None,packs))
    all_endpoints = [(packs[p].center, packs[l].center) for p in packs for l in packs[p].all]
    all_controls = [control_point(ep[0], ep[1], 0.5) for ep in all_endpoints]
    return all_bb + all_controls

def recenter(packs, points):
    "shift everything into quadrant 1"
    min_x,min_y = map(min, zip(*points))
    for name in packs:
        p = packs[name].center
        packs[name].center = p[0]-min_x, p[1]-min_y
    return packs

def window_size(points):
    xs,ys = zip(*points)
    return max(xs)-min(xs), max(ys)-min(ys)

def all_links(packs):
    paths = []
    for pack in packs:
        links = packs[pack].all
        p1 = packs[pack].center
        paths.extend((p1,packs[l].center) for l in links if l<pack)
    return paths

def svgify(packs):
    options, args = parse()
    toplevel = toplevel_packs(packs)
    bottomlevel = set(packs) - toplevel
    needs, needed_by = [], []
    if args and options.mode not in ['arch-repo']:
        needs     = flatten(full_deps(p, packs, reverse=False) for p in args)
        needed_by = flatten(full_deps(p, packs, reverse=True)  for p in args)
    all_ps = all_points(packs)
    packs = recenter(packs, all_ps)
    width,height = window_size(all_ps)
    for pack,node in packs.iteritems():
        # replace with a lookup structure of some sort
        # { test_fn(): 'color', ... }?  [ (pack_set, 'color'), ... ]?
        # also, order sensitive
        if pack in bottomlevel:
            node.color = options.dependency
        if pack in toplevel:
            node.color = options.toplevel
        if pack in needs:
            node.color = options.highlight[1]
        if pack in needed_by:
            node.color = options.highlight[2]
        if pack in args and options.mode not in ['arch-repo']:
            node.color = options.highlight[0]
    texts = [svg_text(packs[p]) for p in packs]
    paths = [svg_spline(*line) for line in all_links(packs)]
    svg =  xml_wrap('rect', None, x=0, y=0, width=width, height=height, style='fill:%s;' % options.background)
    svg += xml_wrap('g', '\n'.join(paths), style='stroke:%s; stroke-opacity:0.15; fill:none;' % options.link)
    svg += xml_wrap('g', '\n'.join(texts), **{'font-family':'Monospace'})
    svg = xml_wrap('svg', svg, width=width, height=height, xmlns='http://www.w3.org/2000/svg')
    svg = '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.0//EN" "http://www.w3.org/TR/SVG/DTD/svg10.dtd">\n' + svg
    svg = '<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n' + svg
    filename = os.path.expanduser(options.filename)
    open(filename + '.svg', 'w').write(svg)

def call_status(cmd):
    "returns exit status"
    spp = subprocess.PIPE
    return subprocess.Popen(cmd, shell=True, stdout=spp, stderr=spp).wait()

def call_stdout(cmd):
    "returns stdout"
    subp = subprocess.Popen(cmd, shell=True, stdin=None, stdout=subprocess.PIPE)
    return subp.communicate()[0].split('\n')

def parse():
    default_action = 'arch'
    parser = optparse.OptionParser(description='Produces two files, pacgraph.svg and pacgraph.png.  Colors should be entered as hex values like "#ffffff".  SVG named colors may also work, see http://en.wikipedia.org/wiki/Web_colors .  Packages listed in the args are highlighted.')
    parser.add_option('-s', '--svg', dest='svg_only', action='store_true', default=False,
            help='Produce the SVG but do not attempt to rasterize it.')
    parser.add_option('-o', '--opt-deps', dest='opt_deps', action='store_true', default=False,
            help='Include optional dependencies.  May produce a less compact graph.')
    parser.add_option('-e', '--explicits', dest='preserve_explicit', action='store_true', default=False,
            help='Preserve explicitly installed applications from dependency compression.  May produce a less compact graph.')
    parser.add_option('-c', '--console', dest='console', action='store_true', default=False,
            help='Print summary to console, does not draw a graph.  Good for very slow computers.')
    parser.add_option('-r', '--rip', dest='rip', action='store_true', default=False,
            help='Rips a copy of your installed packages to pacgraph.txt.  Good for debugging.')
    parser.add_option('-f', '--file', dest='filename', default='pacgraph',
            help='Override default filename/location.  Do not specify an extension.')
    
    colors = optparse.OptionGroup(parser, "Theming Options")
    colors.add_option('-b', '--background', dest='background', metavar='COLOR', default='#ffffff',
            help='Background color.')
    colors.add_option('-l', '--link', dest='link', metavar='COLOR', default='#606060',
            help='Color of links between packages.')
    colors.add_option('-t', '--top', dest='toplevel', metavar='COLOR', default='#0000ff',
            help='Color of packages which are not dependencies.')
    colors.add_option('-d', '--dep', dest='dependency', metavar='COLOR', default='#6a6aa2',
            help='Color of packages which are dependencies.')
    colors.add_option('-i', '--highlight', dest='highlight', metavar='COLOR COLOR COLOR', nargs=3,
            default=('#00cc00', '#ff0000', '#700060'),
            help='Color of selected package, selected dependancies, selected needed-by.')
    colors.add_option('-p', '--point', dest='point_size', metavar='INT INT', type='int', nargs=2, default=(10,100),
            help='Takes two integers, for the smallest and largest font size.  Default is -p 10 100.')
    parser.add_option_group(colors)

    beta = optparse.OptionGroup(parser, "Experimental Options")
    beta.add_option('-m', '--mode', dest='mode', default=default_action,
            help='Curently supported modes are arch, arch-repo (buggy), debian (buggy), redhat (buggy) and ipkg (buggy).  Default is %s.' % default_action)
    beta.add_option('-n', '--no-compression', dest='use_compression', action='store_false', default=True,
            help='Disable all chain compression.')
    beta.add_option( '--shared', dest='shared', action='store_true', default=False,
            help='Compare shared libraries.')
    parser.add_option_group(beta)
    
    options, args = parser.parse_args()
    return options, args

def human_si(number):
    powers = [(2**15,''), (2**25,'k'), (2**35,'M'), (2**45,'G')]
    limit,si = [p for p in powers if p[0] > number][0]
    return str(number//(limit//2**15)) + si +'B'

def console_dump(tree):
    options, args = parse()
    stat_line = human_si(sum(v.size for k,v in tree.items()))
    print 'Total size:', stat_line
    if options.use_compression:
        tops = toplevel_packs(tree)
    else:
        tops = tree.keys()
    if len(tops) == 1:
        tops = tree.keys()
    for s,n in packs_by_size(tree, tops):
        print human_si(s), n
    return

def secondlevel_sizes(tree):
    # this is slightly lazy and only handles the common case
    # it ignores oddly shaped dep trees
    tops = toplevel_packs(tree)
    seconds = set([])
    [seconds.update(tree[t].links) for t in tops]  # yucky list comp
    sec_info = []
    for s in seconds:
        aboves = tree[s].inverse & tops  # lazy!
        size = tree[s].size + sum(tree[i].size for i in aboves)
        sec_info.append((size/len(aboves), s, size, aboves))
    sec_info.sort()
    sec_info.reverse()
    for null, s, size, aboves in sec_info:
        print '%s: %s ' % (s, human_si(size))
        print '\t', ' '.join(sorted(aboves))

def main():
    arch = Arch()
    debian = Debian()
    redhat = Redhat()
    textfile = Textfile()
    options, args = parse()
    filename = os.path.expanduser(options.filename)
    print 'Loading package info'
    if options.mode == 'arch':
        tree = arch.local_load()
    if options.mode == 'arch-repo':
        tree = arch.repo_load()
    if options.mode == 'debian':
        tree = debian.local_load()
    if options.mode == 'redhat':
        tree = redhat.local_load()
    if options.mode == 'textfile':
        tree = textfile.local_load()
    if options.mode == 'ipkg':
        tree = debian.local_load(status_path='/usr/lib/ipkg/status')
        # ipkg reports bytes, not KB
        for n,p in tree.items():
            p.size = p.size / 1024
    stat_line = human_si(sum(v.size for k,v in tree.items()))
    if options.rip:
        open(filename + '.txt', 'w').write(repr(tree))
        return
    if options.console:
        console_dump(tree)
        return
    if options.shared:
        secondlevel_sizes(tree)
        return
    print 'Placing %i nodes' % len(tree)
    tree = pt_sizes(tree, *options.point_size)
    for n,c in place(tree):
        tree[n].center = c
    tree = recenter(tree, all_points(tree))
    tree[stat_line] = Node(name=stat_line, font_pt=sum(options.point_size)//2)
    print 'Saving SVG'
    svgify(tree)
    if options.svg_only:
        return
    print 'Rendering PNG'
    png_conversion = ['inkscape -D -e %(fn)s.png %(fn)s.svg',
                      'svg2png %(fn)s.svg %(fn)s.png',
                      'convert %(fn)s.svg %(fn)s.png']
    for cmd_line in png_conversion:
        app = cmd_line.split()[0]
        if call_status('which %s' % app) != 0:
            continue
        call_status(cmd_line % {'fn':filename})
        if call_status('which optipng') == 0:
            print 'Optimizing PNG'
            call_status('optipng %s.png' % filename)
        return  # after first success
    print 'No way to convert SVG to PNG.'
    print 'Inkscape, svg2png or imagemagick would be nice.'
    print 'Alternatives: "pacgraph-i" or "pacgraph --console".'
    print
    console_dump(tree)

if __name__ == "__main__":
    main()
    #cProfile.run("main()", sort=1)

"""
possible/future command line options

-a  --add         packages
-d  --dot         load dot file

line weight? alpha? tree dump/load?
"""
